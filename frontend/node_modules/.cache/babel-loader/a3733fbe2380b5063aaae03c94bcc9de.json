{"ast":null,"code":"import { csrfFetch } from './csrf';\nconst SET_ILLUSION = 'illusion/setIllusion';\nconst CREATE_ILLUSION = 'illusion/createIllusion';\nconst EDIT_ILLUSION = 'illusion/editIllusion';\nconst DELETE_ILLUSION = 'illusion/deleteIllusion';\n\nconst setIllusion = illusion => {\n  return {\n    type: SET_ILLUSION,\n    payload: illusion\n  };\n};\n\nconst createIllusion = illusion => {\n  return {\n    type: CREATE_ILLUSION,\n    payload: illusion\n  };\n};\n\nconst editIllusion = illusion => {\n  return {\n    type: EDIT_ILLUSION,\n    payload: illusion\n  };\n};\n\nconst deleteIllusion = illusion => {\n  return {\n    type: DELETE_ILLUSION,\n    payload: illusion\n  };\n};\n\nexport const illusionCreate = payload => async dispatch => {\n  const response = await csrfFetch('/api/illusion/create', {\n    method: 'POST',\n    body: JSON.stringify(payload)\n  });\n\n  if (response.ok) {\n    const illusion = await response.json();\n    dispatch(createIllusion(illusion));\n    return illusion;\n  }\n};\nexport const illusionEdit = payload => async dispatch => {\n  const response = await csrfFetch(`/api/illsuion/edit/${payload.id}`, {\n    method: 'PUT',\n    body: JSON.stringify(payload)\n  });\n\n  if (response.ok) {\n    const illusion = await response.json();\n    dispatch(editIllusion(illusion));\n    return illusion;\n  }\n};\nexport const illusionDelete = payload => async dispatch => {\n  console.log(payload, 'illsuionId in thunk');\n  const response = await csrfFetch(`/api/illsuion/delete/${payload.illusionId}`, {\n    method: 'DELETE',\n    body: JSON.stringify(payload)\n  });\n  console.log(response.ok === true);\n\n  if (response.ok) {\n    const illusion = await response.json();\n    dispatch(deleteIllusion(illusion));\n    return illusion;\n  }\n};\nexport const getIllusion = illusionId => async dispatch => {\n  const response = await fetch(`/api/illusion/${illusionId}`);\n  const illusion = await response.json();\n  dispatch(setIllusion(illusion));\n};\n\nconst illusionReducer = (state = [], action) => {\n  let newState;\n\n  switch (action.type) {\n    case SET_ILLUSION:\n      newState = action.payload;\n      return newState;\n\n    case CREATE_ILLUSION:\n      newState = action.payload;\n      return newState;\n\n    case EDIT_ILLUSION:\n      newState = action.payload;\n      return newState;\n\n    case DELETE_ILLUSION:\n      newState = action.payload;\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default illusionReducer;","map":{"version":3,"sources":["/Users/jonathan/Documents/app_academy/module5/week15/day4/spade-magick-project/express-react-app/frontend/src/store/illusion.js"],"names":["csrfFetch","SET_ILLUSION","CREATE_ILLUSION","EDIT_ILLUSION","DELETE_ILLUSION","setIllusion","illusion","type","payload","createIllusion","editIllusion","deleteIllusion","illusionCreate","dispatch","response","method","body","JSON","stringify","ok","json","illusionEdit","id","illusionDelete","console","log","illusionId","getIllusion","fetch","illusionReducer","state","action","newState"],"mappings":"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","sourcesContent":["import { csrfFetch } from './csrf';\n\nconst SET_ILLUSION = 'illusion/setIllusion';\nconst CREATE_ILLUSION = 'illusion/createIllusion';\nconst EDIT_ILLUSION = 'illusion/editIllusion';\nconst DELETE_ILLUSION = 'illusion/deleteIllusion';\n\nconst setIllusion = (illusion) => {\n\treturn {\n\t\ttype: SET_ILLUSION,\n\t\tpayload: illusion,\n\t};\n};\n\nconst createIllusion = (illusion) => {\n\treturn {\n\t\ttype: CREATE_ILLUSION,\n\t\tpayload: illusion,\n\t};\n};\n\nconst editIllusion = (illusion) => {\n\treturn {\n\t\ttype: EDIT_ILLUSION,\n\t\tpayload: illusion,\n\t};\n};\n\nconst deleteIllusion = (illusion) => {\n\treturn {\n\t\ttype: DELETE_ILLUSION,\n\t\tpayload: illusion,\n\t};\n};\n\nexport const illusionCreate = (payload) => async (dispatch) => {\n\tconst response = await csrfFetch('/api/illusion/create', {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(payload),\n\t});\n\n\tif (response.ok) {\n\t\tconst illusion = await response.json();\n\t\tdispatch(createIllusion(illusion));\n\t\treturn illusion;\n\t}\n};\n\nexport const illusionEdit = (payload) => async (dispatch) => {\n\tconst response = await csrfFetch(`/api/illsuion/edit/${payload.id}`, {\n\t\tmethod: 'PUT',\n\t\tbody: JSON.stringify(payload),\n\t});\n\n\tif (response.ok) {\n\t\tconst illusion = await response.json();\n\t\tdispatch(editIllusion(illusion));\n\t\treturn illusion;\n\t}\n};\n\nexport const illusionDelete = (payload) => async (dispatch) => {\n\tconsole.log(payload, 'illsuionId in thunk');\n\tconst response = await csrfFetch(\n\t\t`/api/illsuion/delete/${payload.illusionId}`,\n\t\t{\n\t\t\tmethod: 'DELETE',\n\t\t\tbody: JSON.stringify(payload),\n\t\t}\n\t);\n\tconsole.log(response.ok === true);\n\tif (response.ok) {\n\t\tconst illusion = await response.json();\n\t\tdispatch(deleteIllusion(illusion));\n\t\treturn illusion;\n\t}\n};\n\nexport const getIllusion = (illusionId) => async (dispatch) => {\n\tconst response = await fetch(`/api/illusion/${illusionId}`);\n\tconst illusion = await response.json();\n\tdispatch(setIllusion(illusion));\n};\n\nconst illusionReducer = (state = [], action) => {\n\tlet newState;\n\tswitch (action.type) {\n\t\tcase SET_ILLUSION:\n\t\t\tnewState = action.payload;\n\t\t\treturn newState;\n\t\tcase CREATE_ILLUSION:\n\t\t\tnewState = action.payload;\n\t\t\treturn newState;\n\t\tcase EDIT_ILLUSION:\n\t\t\tnewState = action.payload;\n\t\t\treturn newState;\n\t\tcase DELETE_ILLUSION:\n\t\t\tnewState = action.payload;\n\t\t\treturn newState;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default illusionReducer;\n"]},"metadata":{},"sourceType":"module"}